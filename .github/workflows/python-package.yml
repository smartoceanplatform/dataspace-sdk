# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI Pipeline SmartOcean dataspace_sdk

on:
  push:
    branches: [ "dataspace_sdk_poetry_project" ]
  pull_request:
    branches: [ "dataspace_sdk_poetry_project" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

      DATASPACE_API_KEY: ${{ secrets.DATASPACE_API_KEY }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Install Poetry
      run: |
        python -m pip install --user pipx
        python -m pipx ensurepath
        pipx install poetry
        poetry config virtualenvs.in-project true

    - name: Cache dependencies
      uses: actions/cache@v4
      id: cache
      with:
        path: ./.venv
        key: venv-${{ hashFiles('**/poetry.lock')}}

    - name: Install Poetry dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        poetry lock
        poetry install --no-root

    - name: Install pytest
      run: |
        source .venv/bin/activate
        pip install pytest
    
    - name: Run tests
      run: |
        source .venv/bin/activate
        export PYTHONPATH=$(pwd)/src
        pytest -sv

    - name: Install twine
      run: |
        pip install setuptools wheel twine  

    - name: Publish to PyPI
      continue-on-error: true
      run: |
        poetry lock
        poetry build
        twine upload --repository testpypi dist/*







  test_sfisop_dataspace_sdk_package:
    needs: build
    runs-on: ubuntu-latest

    env:
      DATASPACE_API_KEY: ${{ secrets.DATASPACE_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -i https://test.pypi.org/simple/ sfisop-dataspace-sdk --extra-index-url https://pypi.org/simple/
          pip install --upgrade -i https://test.pypi.org/simple/ sfisop-dataspace-sdk --extra-index-url https://pypi.org/simple/

          pip install pytest
          pip list

      - name: Run tests
        run: |
          pytest -sv


